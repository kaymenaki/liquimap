[%
	import 'liquimap.eol';
	var nodes = uem.nodes;
	var transitions = uem.transitions;
	
	if (stage.isDefined()) {
		var touchpoints = stage.steps.touchpoints.flatten();
		nodes = nodes.select(n|touchpoints.includes(n.touchpoint));
		transitions = transitions.select(t|nodes.includes(t.from) or nodes.includes(t.to));
		
		if (isLayerActive("adjacent")) {
			nodes.addAll(transitions.from);
			nodes.addAll(transitions.to);
		}
		else {
			nodes.addAll(transitions.from.select(n|n.touchpoint.isUndefined() or touchpoints.includes(n.touchpoint)));
			nodes.addAll(transitions.to.select(n|n.touchpoint.isUndefined() or touchpoints.includes(n.touchpoint)));
			transitions = transitions.select(t|nodes.includes(t.from) and nodes.includes(t.to));
		}
		nodes = nodes.asSet();
	}
	
%]
digraph G {
	node[shape=rectangle, fontname=Tahoma, fontsize=10, fontcolor=white, style=filled, gradientangle="270"]
	edge[fontname=Tahoma, fontsize=10, fontcolor=grey]
	graph[nodesep="0.2", ranksep="0.2"]
	rankdir=LR;
	
	[%for (node in nodes) { %]
	[%=node.getNodeId()%] [label="[%=node.getDotLabel()%]", shape="[%=node.getShape()%]", fillcolor="[%=node.getFillColor()%]", fontcolor="[%=node.getFontColor()%]", tooltip="[%=node.id%]", style="[%=node.getStyle()%]", [%=node.getMargin()%]];
	[%}%]
	
	[%for (transition in transitions) { %]
	[%=transition.from.getNodeId()%] -> [%=transition.to.getNodeId()%] [label="[%=transition.getLabel()%]", tooltip="[%=transition.id%]"];
	[%}%]
	
}

[%
operation UserFlowNode getNodeId() {
	return "Node" + nodes.indexOf(self);
}

operation UserFlowNode getShape() {
	if (self.isTypeOf(Decision)) {
		return "diamond";
	}
	else {
		return "box";
	}
}

operation UserFlowNode getStyle() {
	if (self.isTypeOf(Decision)) {
		return "filled";
	}
	else {
		return "filled, rounded";
	}
}

operation Action getMargin() {
	return "";
}

operation Decision getMargin() {
	return "margin=0.02";
}

operation Decision getDotLabel() {
	return (self.name + "").toMultiline();
}

operation Action getDotLabel() {
	return (self.getLabel() + "").toMultiline();
}

operation Transition getLabel() {
	return (self.name + "").toMultiline();
}

operation String toMultiline() : String {
	return self.toMultiline("\\n");
}

operation String toMultiline(newline : String) : String {
	var multiline = "";
	
	for (line in self.split("\\n")) {
		var length = 0;
		for (part in line.split(" ")) {
			multiline += part + " ";
			length += part.length();
			if (length > 4) {
				multiline += newline;
				length = 0;
			}
		}
		if (not multiline.endsWith(newline)) multiline += newline;
		if (hasMore) multiline += "\\n";
	}
	if (not multiline.endsWith(newline)) multiline += newline;
	
	multiline = multiline.replaceAll('"', '\\\\"');
	
	return multiline;
}
%]