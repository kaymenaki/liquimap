rule Blueprint2HTML 
	transform b : Blueprint {

	template : "blueprint2html.egl"

	parameters : Map {
		"path" = Sequence{"Liquimap", "Blueprints", b.name},
		"format" = "html",
		"stages" = Stage.all,
		"steps" = Step.all,
		"touchpoints" = Touchpoint.all,
		"departments" = Department.all,
		"layers" = Sequence {
			Map{
				"title" = "Departments",
				"id" = "departments"
			}
		}
	}
	
}

rule Blueprint2Sankey 
	transform b : Blueprint {

	template : "blueprint2sankey.egl"

	parameters : Map {
		"path" = Sequence{"Liquimap", "Blueprints", b.name, "Sankey"},
		"format" = "html"
	}
	
}

rule Department2HTML
	transform d : Department {
	
	template : "blueprint2html.egl"
	
	parameters : Map {
		"path" = Sequence{"Liquimap", "Departments", d.name},
		"format" = "html",
		"stages" = d.getStages(),
		"steps" = d.getSteps(),
		"touchpoints" = d.getTouchpoints(),
		"departments" = Sequence{d}
	}
	
}

rule Stage2HTML
	transform stage : Stage {
	
	template : "blueprint2html.egl"
	
	parameters : Map {
		"path" = Sequence{"Liquimap", "Blueprints", stage.eContainer().name, "Stages", stage.name},
		"format" = "html",
		"stages" = Sequence{},
		"steps" = stage.steps,
		"touchpoints" = stage.steps.touchpoints.flatten(),
		"departments" = stage.getDepartments()
	}
	
}

rule ExperienceMap2Dot 
	transform map : ExperienceMap {

	template : "experiencemap2dot.egl"

	parameters : Map {
		"path" = Sequence{"Liquimap", "Experience Maps", map.name},
		"format" = "graphviz-dot"
	}
	
}

rule UserJourney2HTML
	transform journey : UserJourney {
	
	template : "userjourney2html.egl"
	
	parameters : Map {
		"path" = Sequence{"Liquimap", "Experience Maps", journey.eContainer().name, journey.name},
		"format" = "html"
	}
	
}

operation Department getStages() {
	return Stage.all.select(stage|stage.steps.exists(step|self.getSteps().includes(step)));
}

operation Department getSteps() {
	return Step.all.select(step|step.touchpoints.
		exists(touchpoint|self.getTouchpoints().includes(touchpoint)));
}

operation Department getTouchpoints() {
	return Touchpoint.all.select(touchpoint|touchpoint.departments.includes(self));
}

operation Stage getDepartments() {
	
	return Department.all.select(d|
		self.steps.touchpoints.flatten().departments.flatten().includes(d));
}
