[%import 'liquimap.eol';%]
<html>
<head>
<link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet'>
<link rel="stylesheet" href="file:[%=getImage("liquimap.css") + "?" + 1.to(10000).random()%]"/>
</head>

<body>
[%var actions = journey.getActions();%]

<b>Expectations:</b> [%=journey.expectations%]

<table border="1">
	<tr>
		<td> </td>
		[%for (action in actions) { %]
			<td class="action" style="background-color: [%=action.colour%]">[%=action.getLabel()%]</td>
		[%}%]
	</tr>
	
	<tr>
		<td> </td>
		[%for (action in actions) { %]
			<td><img src="[%=action.image.isDefined() ? getImage(action.image) : ''%]" style="width:200px"></td>
		[%}%]
	</tr>
	
	<tr>
		<td class="header">Mood</td>
		[%for (action in actions) { %]
			<td>[%=action.mood%]</td>
		[%}%]
	</tr>

	<tr>
		<td class="header">Emotion</td>
		[%for (action in actions) { %]
			<td>[%=action.emotion%]</td>
		[%}%]
	</tr>
	
	<tr>
		<td class="header">Pains and Gains</td>
		[%for (action in actions) { %]
			<td>
			[%if (not action.pains.isEmpty()){%]
			<b>Pains</b>
			<ul>
				[%for (pain in action.pains){%]
				<li>[%=pain%]</li>
				[%}%]
			</ul>
			[%}%]
			
			[%if (not action.gains.isEmpty()){%]
			<b>Gains</b>
			<ul>
				[%for (gain in action.gains){%]
				<li>[%=gain%]</li>
				[%}%]
			</ul>
			[%}%]
			</td>
		[%}%]
	</tr>
	
	<tr>
		<td class="header">Opportunities</td>
		[%for (action in actions) { %]
			<td>
			<ul>
				[%for (opportunity in action.opportunities){%]
				<li>[%=opportunity%]</li>
				[%}%]
			</ul>
			</td>
		[%}%]
	</tr>
	
	<tr>
		<td class="header">Comments</td>
		[%for (action in actions) { %]
			<td>
			[%=action.comments%]
			</td>
		[%}%]
	</tr>
	
</table>
</body>
</html>

[%
operation UserJourney getActions() {
	
	var start = self.eContainer().nodes.selectOne(n|n.incoming.isEmpty());
	var actions : Sequence;
	
	if (start == null) return actions;
	actions.add(start);
	
	while (not start.outgoing.isEmpty()) {
		if (start.isTypeOf(Action)) {
			start = start.outgoing.first().to;
			if (actions.contains(start)) return actions;
			actions.add(start);
		}
		else {
			start = start.outgoing.selectOne(t|self.choices.includes(t)).to;
			if (actions.contains(start)) return actions;
			actions.add(start);
		}
	}
	
	return actions.select(a|a.isTypeOf(Action));
	
}
%]